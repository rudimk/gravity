syntax = "proto3";

package installer;

import "gogo.proto";

// Agent defines a service to install a cluster
service Agent {
    // Execute runs installer operation to completion
    rpc Execute(ExecuteRequest) returns (stream ProgressResponse);

    // Shutdown requests that the installer exit
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);

    // Abort requests that the installer service aborts and cleans up
    // the state of the operation
    rpc Abort(AbortRequest) returns (AbortResponse);
}

// ExecuteRequest describes a request to execute install operation
message ExecuteRequest {
}

// ShutdownRequest describes a request to shut down the process
message ShutdownRequest {
}

// ShutdownResponse describes the server response to the shut down request
message ShutdownResponse {
}

// AbortRequest describes a request to abort the operation and clean up
message AbortRequest {
}

// AbortResponse describes the server response to the abort request
message AbortResponse {
    // Error specifies the error from the abort handler
    Error error = 1;
}

// ProgressResponse describes a single progress step
message ProgressResponse {
    // Message specifies the progress message
    string message = 1;
    // Status defines the status of this progress message.
    // If the status is one of (COMPLETED, ABORTED), this response is the last response sent
    enum Status {
        UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "Unknown"];
        // COMPLETED status indicates that the operation has successfully completed.
        // This status iis terminal - no more progress messages will follow
        COMPLETED = 1 [(gogoproto.enumvalue_customname) = "Completed"];
        // ABORTED status indicates that the operation has been aborted.
        // This status iis terminal - no more progress messages will follow
        ABORTED = 2 [(gogoproto.enumvalue_customname) = "Aborted"];
    }
    // Status describes the status of this response
    Status status = 2;
    // Errors lists errors for this progress step
    repeated Error errors = 3;
}

// Error represents an error in the operation
message Error {
    // Message specifies the error message
    string message = 1;
}
